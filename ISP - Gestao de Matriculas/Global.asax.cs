using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Optimization;
using System.Web.Routing;
using System.Data.Entity;
using Autofac;
using Autofac.Integration.Mvc;
using Autofac.Configuration;
using ISP.GestaoMatriculas.Repositories.DbPopulate;
using ISP.GestaoMatriculas.Model;
using System.Security.Principal;
using System.Reflection;
using System.Web.Security;


namespace ISP.GestaoMatriculas
{
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    // visit http://go.microsoft.com/?LinkId=9394801

    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            RegisterIoCContainer();

            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
            AuthConfig.RegisterAuth();

            DbExample1.PopulateDB(new DomainModels());
        }

        private void RegisterIoCContainer()
        {
            var builder = new ContainerBuilder();

            builder.RegisterSource(new ViewRegistrationSource());

            builder.RegisterControllers(typeof(MvcApplication).Assembly)
                .InstancePerHttpRequest()
                .PropertiesAutowired();

            builder.RegisterModule(new ConfigurationSettingsReader("autofac"));

            var container = builder.Build();
            DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
        }

        //protected void Application_AuthenticateRequest(Object sender, EventArgs e)
        //{
        //    // NOTE: Because we are encrypting some information and passing it to another site, 
        //    // the MACHINE.CONFIG file needs to have the <machinekey> element set to a static 
        //    // value. By default, this value is autogenerated for each web application on the 
        //    // machine and will therefore fail if you try and pass encrypted tickets/data between
        //    // web apps.
        //    WindowsIdentity ident = WindowsIdentity.GetCurrent();
        //    WindowsPrincipal wind_princ = new WindowsPrincipal(ident);
        //    //string[] roles = GetRoles(wind_princ);   // See method above for 
        //    // implementation of this method

        //    string roleData = "";//String.Join(";", roles);
        //    FormsAuthenticationTicket ticket =
        //      new FormsAuthenticationTicket(1,
        //        "your_ticket_name", DateTime.Now,
        //        DateTime.Now.AddMinutes(30), false, roleData, "/");
        //    string encTicket = FormsAuthentication.Encrypt(ticket);

        //    // NOTE: The name of the HttpCookie must match what the FormsAuth site expects.
        //    Response.Cookies.Add(new HttpCookie("YourCookieName", encTicket));
        //    // Ticket and cookie issued, now go to the FormsAuth site and all should be well.
        //    Response.Redirect("http://localhost:52523/");
        //}


        //private static string[] GetRoles(IPrincipal princ)
        //{
        //    Type type = princ.GetType();

        //    // Note: This code sets the 'MAGIC_NUMBER' field of the principal object.
        //    FieldInfo field2 = type.GetField("MAGIC_NUMBER",
        //      BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Static);
        //    field2.SetValue(princ, 40);  // This value can be any number but defaults to 23.

        //    princ.IsInRole("DummyRole");  // This call is required so that the subsystem goes 
        //    // and retrieves a list of roles.
        //    // Without this call, the principal object does not contain any roles in its internal
        //    // variables, and thus the code below that uses reflection to get the value of this variable
        //    // will fail and return NULL.

        //    FieldInfo field = type.GetField("m_roles", BindingFlags.Instance | BindingFlags.NonPublic);
        //    String[] roles = (String[])field.GetValue(princ);

        //    return roles;
        //}
    }
}